version: 2.1
# Use a package of configuration called an orb
# orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  #  aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project

commands:
  destroy_environment:
    steps:
      - run: 
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
# Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
# Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # create_infrastructure: 
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run:
  #           name: Create Cloudformation Stack
  #           command: |
  #             aws cloudformation deploy \
  #               --template-file template.yml \
  #               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
  #               --region us-east-1
  
  # configure_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["59:ec:13:aa:13:d2:18:41:8d:ff:15:e7:56:09:fd:23"] # You can get this ID in the section where you registered the SSH Key
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible 
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i ../inventory main.yml
  #         name: save IP Adress to inventory
  #         command: |
  #           aws ec2 describe-instances \
  #   \
  #       --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #     --filters "Name=tag:Project,Values=udacity" \
  #     --output text >> inventory 
  # smoke_test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:  
  #         name: smoke test
  #         command: return 1
      # - destroy_environment

# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_and_deploy_front_end
      # - create_infrastructure
      # - configure_infrastructure
      #     requires:
      #       - create_infrastructure
      # - smoke_test:
          # requires: 
            # - create_infrastructure
